"from seamless import subprocess\nimport tempfile, os\nfrom seamless.subprocess import CalledProcessError, PIPE\ntokens = \"<|>\"\nlabels0 = \"UPSTREAM\", \"BASE\", \"MODIFIED\"\n\nno_conflict = \"No conflict\"\n\nclass SeparatorInTextError(Exception):\n    pass\n\ndef build_labels(upstream, base, modified):\n    n = \"\"\n    while 1:\n        try:\n            for token in tokens:\n                tokstr = 7 * token + \" \"\n                for label in labels0:\n                    tokstr2 = tokstr + label + str(n)\n                    for text in upstream, base, modified:\n                        if text is None:\n                            continue\n                        if text.find(tokstr2) > -1:\n                            raise SeparatorInTextError\n        except SeparatorInTextError:\n            if n == \"\":\n                n = 0\n            n += 1\n            continue\n        break\n    return tuple([l+str(n) for l in labels0])\n\nupstream, base, modified = None, None, None\nif PINS.conflict.defined and len(PINS.conflict.value.strip()):\n    state = \"conflict\"\n    upstream = PINS.upstream_stage.value\n    base = PINS.base.value\n    modified = PINS.modified.value\n    labels = build_labels(upstream, base, modified)\nelif not PINS.modified.defined or PINS.modified.value == PINS.base.value:\n    state = \"passthrough\"\nelse:\n    state = \"modify\"\n\nif state != \"conflict\":\n    PINS.conflict.set(no_conflict)\nfallback_mode = PINS.fallback_mode.value\n"
